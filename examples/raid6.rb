$:.unshift File.join(File.dirname(__FILE__), "..", "lib")

# = raid6.rb - Generate the Q parity block for a RAID 6 array.
#
# Copyright (C) 2008  Stephen Doyle
#
# This example illustrates using the finitefield library in the context
# of RAID 6 to generate the Q parity block. 
#
# == Background
# RAID 6 provides protection against double disk failures in an array of 
# disks by using two disks in the array to hold parity information. The
# first parity block is known as the P block and generated by taking an 
# XOR of the data blocks in the disk array (D0 + D1 + ... Dn). This is 
# equivalent to addition over a finite field of the form F(2^8). 
#
# The second parity block, aka the Q block, in a RAID 6 array is generated 
# by multiplying each byte of the data blocks with a coefficient which is 
# slected based upon the position of that disk in the array. The 
# multiplication here is multiplication over a finite field of the form 
# F(2^8) and the coefficients are taken from the anti-log table from the 
# same field. The default RAID 6 polynimial is 0x11D.
# 
# == What's covered in the example?
# This example illustrates the computation of both the P and Q blocks for
# a sample RAID 6 array using a stripe size of 512 bytes. 
#

require 'finitefield'
require 'exampleUtils'

class Raid6

  # Create a field of GF(2^n) using the specified generator polynomial
  def initialize(polynomial)
    @field = FiniteField.new(8, polynomial)
  end

  def getPBlock(dataBlocks)
    pBlock = [0] * dataBlocks[0].length
    dataBlocks.each do |blk| 
      (0...blk.length).each { |byteIdx| pBlock[byteIdx] ^= blk[byteIdx] }
    end
    return pBlock
  end
  
  def getQBlock(dataBlocks, coefficients)
    qBlock = [0] * dataBlocks[0].length
    dataBlocks.each_with_index do |blk, blkIdx|
      (0...blk.length).each do |byteIdx| 
        qBlock[byteIdx] ^= @field.multiply(blk[byteIdx], coefficients[blkIdx])
      end
    end
    return qBlock
  end
end

# See logTables.rb for futher details.
def getILogTable(poly, generator)
  field = FiniteField.new(8, poly)
  ilogTable = [1]

  1.upto(0xFF) do |i|
    ilogTable[i] = field.multiply(ilogTable[i-1], generator)
  end
  return ilogTable
end

# Sample data
data = []
data[0] = [1]*512
data[1] = [2]*512
data[2] = [4]*512
data[3] = [5]*512
data[4] = [6]*512
data[5] = [9]*512

# Generate the blocks
raid = Raid6.new(0x11d)
coefficients = getILogTable(0x11d, 2)
pBlk = raid.getPBlock(data)
qBlk = raid.getQBlock(data, coefficients)
